// Generated by Haxe 4.1.3
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DOM = function() { };
DOM.__name__ = true;
DOM.e = function(o) {
	var e = window.document.createElement(o.t);
	if(null != o.id) {
		e.id = StringTools.replace(o.id," ","-");
	}
	if(o.c != null) {
		var _g = o.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(o.p != null) {
		if(o.insertBefore != null) {
			o.p.insertBefore(e,o.insertBefore);
		} else {
			o.p.appendChild(e);
		}
	}
	if(o.title != null) {
		e.title = o.title;
	}
	return e;
};
DOM.div = function(o) {
	var eO = { t : "div"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	if(o != null && o.h != null) {
		e1.innerHTML = o.h;
	}
	return e1;
};
DOM.button = function(o) {
	var eO = { t : "button"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	if(o != null && o.h != null) {
		e1.innerHTML = o.h;
	}
	e1.addEventListener("click",function() {
		if(o.fnc != null) {
			o.fnc();
		}
	});
	return e1;
};
DOM.label = function(o) {
	var eO = { t : "label"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	if(o != null && o.h != null) {
		e1.innerHTML = o.h;
	}
	if(o != null && o.f != null) {
		(js_Boot.__cast(e1 , HTMLLabelElement)).htmlFor = o.f;
	}
	return e1;
};
DOM.img = function(o) {
	var eO = { t : "img"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	if(o != null && o.src != null) {
		e1.src = o.src;
	}
	return e1;
};
DOM.anchor = function(o) {
	var eO = { t : "a"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	if(o != null && o.h != null) {
		e1.innerHTML = o.h;
	}
	if(o != null && o.href != null) {
		e1.href = o.href;
	} else {
		e1.href = "javascript:;";
	}
	if(o != null && o.fnc != null) {
		e1.addEventListener("click",o.fnc);
	}
	return e1;
};
DOM.span = function(o) {
	var eO = { t : "span"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	if(o != null && o.h != null) {
		e1.innerHTML = o.h;
	}
	return e1;
};
DOM.ol = function(o) {
	var eO = { t : "ol"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	return e1;
};
DOM.ul = function(o) {
	var eO = { t : "ul"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	return e1;
};
DOM.li = function(o) {
	var eO = { t : "li"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	if(o != null && o.h != null) {
		e1.innerHTML = o.h;
	}
	return e1;
};
DOM.input = function(o) {
	var eO = { t : "input"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	if(o != null && o.type != null) {
		e1.type = o.type;
	}
	if(o != null && o.placeholder != null) {
		e1.placeholder = o.placeholder;
	}
	return e1;
};
DOM.textarea = function(o) {
	var eO = { t : "textarea"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	return e1;
};
DOM.table = function(o) {
	var eO = { t : "table"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	return e1;
};
DOM.thead = function(o) {
	var eO = { t : "thead"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	return e1;
};
DOM.tbody = function(o) {
	var eO = { t : "tbody"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	return e1;
};
DOM.tr = function(o) {
	var eO = { t : "tr"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	return e1;
};
DOM.td = function(o) {
	var eO = { t : "td"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	if(o.colSpan != null) {
		e1.setAttribute("colSpan","" + o.colSpan);
	}
	if(o.rowSpan != null) {
		e1.setAttribute("rowSpan","" + o.rowSpan);
	}
	if(o != null && o.h != null) {
		e1.innerHTML = o.h;
	}
	return e1;
};
DOM.th = function(o) {
	var eO = { t : "th"};
	DOM.mergeOptions(eO,o);
	var e = window.document.createElement(eO.t);
	if(null != eO.id) {
		e.id = StringTools.replace(eO.id," ","-");
	}
	if(eO.c != null) {
		var _g = eO.c;
		switch(_g._hx_index) {
		case 0:
			var a = _g.v;
			e.className = a.join(" ");
			break;
		case 1:
			var v = _g.v;
			e.className = v;
			break;
		}
	}
	if(eO.p != null) {
		if(eO.insertBefore != null) {
			eO.p.insertBefore(e,eO.insertBefore);
		} else {
			eO.p.appendChild(e);
		}
	}
	if(eO.title != null) {
		e.title = eO.title;
	}
	var e1 = e;
	if(o != null && o.h != null) {
		e1.innerHTML = o.h;
	}
	return e1;
};
DOM.mergeOptions = function(out,merge) {
	if(merge != null) {
		out.c = merge.c;
		out.p = merge.p;
		out.id = merge.id;
		out.title = merge.title;
	}
};
DOM.newEvent = function(eventName) {
	var event;
	if(!DOM.isIE11) {
		event = new Event(eventName);
	} else {
		event = window.document.createEvent("Event");
		event.initEvent(eventName,true,true);
	}
	return event;
};
var CSSClass = {};
CSSClass.fromA = function(a) {
	return haxe_ds_Either.Left(a);
};
CSSClass.fromB = function(b) {
	return haxe_ds_Either.Right(b);
};
CSSClass.toA = function(this1) {
	if(this1._hx_index == 0) {
		var a = this1.v;
		return a;
	} else {
		return null;
	}
};
CSSClass.toB = function(this1) {
	if(this1._hx_index == 1) {
		var b = this1.v;
		return b;
	} else {
		return null;
	}
};
var DatePicker = function(container,createInput,title,initDate) {
	if(createInput == null) {
		createInput = true;
	}
	this.curMode = null;
	this.curRange = -1;
	this.activeCell = null;
	this.mode = 0;
	this.container = container;
	this.title = title;
	this.displayDate = initDate != null ? initDate : new Date();
	this.displayDate = new Date(this.displayDate.getFullYear(),this.displayDate.getMonth(),this.displayDate.getDate(),this.displayDate.getHours(),this.displayDate.getMinutes(),this.displayDate.getSeconds());
	if(initDate != null) {
		this.pickedDate = this.displayDate;
	}
	container.classList.add("datepicker-container");
	if(createInput) {
		this.input = DOM.input({ p : container});
		this.input.onfocus = $bind(this,this.show);
		this.input.oninput = $bind(this,this.syncPickedDate);
	}
};
DatePicker.__name__ = true;
DatePicker.prototype = {
	focus: function() {
		if(this.input != null) {
			this.input.focus();
		}
	}
	,show: function() {
		this.buildView();
		this.container.appendChild(this.view);
		this.syncActiveCell();
	}
	,hide: function() {
		if(this.view != null) {
			this.view.remove();
		}
	}
	,buildView: function() {
		var _gthis = this;
		if(this.view != null) {
			return;
		}
		this.view = DOM.div({ c : haxe_ds_Either.Right("picker")});
		if(this.input != null) {
			this.view.classList.add("with-input");
		}
		DOM.div({ p : this.view, c : haxe_ds_Either.Right("title"), h : this.title != null ? this.title : ""});
		var prevButton = DOM.button({ p : this.view, c : haxe_ds_Either.Right("btn-prev"), h : "&lt;"});
		this.modeButton = DOM.button({ p : this.view, c : haxe_ds_Either.Right("btn-mode")});
		var nextButton = DOM.button({ p : this.view, c : haxe_ds_Either.Right("btn-next"), h : "&gt;"});
		var _g = 0;
		var _g1 = DatePicker.daysOfWeekAbbr;
		while(_g < _g1.length) {
			var dow = _g1[_g];
			++_g;
			DOM.div({ p : this.view, c : haxe_ds_Either.Right("header"), h : dow});
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = 42;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push({ div : DOM.div({ p : this.view, c : haxe_ds_Either.Right("cell")}), time : 0});
		}
		this.cells = _g;
		var _g = 0;
		var _g1 = this.cells;
		while(_g < _g1.length) {
			var cell = [_g1[_g]];
			++_g;
			cell[0].div.onclick = (function(cell) {
				return function() {
					var tmp = new Date(cell[0].time);
					_gthis.displayDate = _gthis.pickedDate = tmp;
					_gthis.syncInput();
					var tmp;
					switch(_gthis.mode) {
					case 0:
						tmp = 0;
						break;
					case 1:
						tmp = 0;
						break;
					case 2:
						tmp = 1;
						break;
					case 3:
						tmp = 2;
						break;
					}
					_gthis.mode = tmp;
					_gthis.syncCells();
					_gthis.syncActiveCell();
				};
			})(cell);
		}
		this.syncCells();
		var moveRange = function(move) {
			var year = _gthis.displayDate.getFullYear();
			var month = _gthis.displayDate.getMonth();
			switch(_gthis.mode) {
			case 0:
				month += move;
				break;
			case 1:
				year += move;
				break;
			case 2:
				year += move * 10;
				break;
			case 3:
				year += move * 100;
				break;
			}
			while(month < 0) {
				--year;
				month += 12;
			}
			while(month > 11) {
				++year;
				month -= 12;
			}
			_gthis.displayDate = new Date(year,month,_gthis.displayDate.getDate(),_gthis.displayDate.getHours(),_gthis.displayDate.getMinutes(),_gthis.displayDate.getSeconds());
			_gthis.syncCells();
			_gthis.syncActiveCell();
		};
		var move = -1;
		prevButton.onclick = function() {
			moveRange(move);
		};
		var move1 = 1;
		nextButton.onclick = function() {
			moveRange(move1);
		};
		this.modeButton.onclick = function() {
			switch(_gthis.mode) {
			case 0:
				_gthis.mode = 1;
				break;
			case 1:
				_gthis.mode = 2;
				break;
			case 2:
				_gthis.mode = 3;
				break;
			case 3:
				_gthis.mode = 3;
				break;
			}
			_gthis.syncCells();
			_gthis.syncActiveCell();
		};
	}
	,syncPickedDate: function() {
		if(this.input == null) {
			return;
		}
		var newTime = Date.parse(this.input.value);
		if(isNaN(newTime) || this.pickedDate != null && this.pickedDate.getTime() == newTime) {
			return;
		}
		this.displayDate = this.pickedDate = new Date(newTime);
		this.syncCells(true);
		this.syncActiveCell();
	}
	,syncInput: function() {
		if(this.pickedDate == null) {
			return;
		}
		var jsDate = this.pickedDate;
		var val = jsDate.toLocaleDateString();
		if(this.input != null) {
			this.input.value = val;
		}
		if(this.mode == 0 && this.oninput != null) {
			this.oninput(val);
		}
	}
	,syncActiveCell: function() {
		var _gthis = this;
		if(this.pickedDate == null) {
			return;
		}
		var newCell = Lambda.find(this.cells,function(c) {
			return c.time == _gthis.pickedDate.getTime();
		});
		if(newCell != null && newCell.div == this.activeCell) {
			return;
		}
		if(this.activeCell != null) {
			this.activeCell.classList.remove("active");
		}
		this.activeCell = newCell != null ? newCell.div : null;
		if(this.activeCell != null) {
			this.activeCell.classList.add("active");
		}
	}
	,syncCells: function(force) {
		if(force == null) {
			force = false;
		}
		if(!force && this.curMode == this.mode) {
			switch(this.mode) {
			case 0:
				if(this.displayDate.getMonth() == this.curRange) {
					return;
				}
				break;
			case 1:
				if(this.displayDate.getFullYear() == this.curRange) {
					return;
				}
				break;
			case 2:
				if(Math.floor(this.displayDate.getFullYear() / 10) == this.curRange) {
					return;
				}
				break;
			case 3:
				if(Math.floor(this.displayDate.getFullYear() / 100) == this.curRange) {
					return;
				}
				break;
			}
		}
		this.curMode = this.mode;
		this.view.classList.remove("day-mode","month-mode","year-mode","decade-mode");
		switch(this.curMode) {
		case 0:
			this.curRange = this.displayDate.getMonth();
			this.modeButton.innerHTML = "" + DatePicker.monthsFull[this.displayDate.getMonth()] + " " + Std.string(this.displayDate.getFullYear());
			this.view.classList.add("day-mode");
			var _g = 0;
			var _g1 = this.cells;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.div.style.display = "unset";
			}
			var firstOfMonth = new Date(this.displayDate.getTime() - (this.displayDate.getDate() - 1) * 86400000);
			var useTime = firstOfMonth.getTime() - firstOfMonth.getDay() * 86400000;
			var prev = true;
			var _g = 0;
			var _g1 = this.cells;
			while(_g < _g1.length) {
				var cell = _g1[_g];
				++_g;
				var useDate = new Date(useTime);
				cell.div.classList.remove("prev","next");
				if(useDate.getMonth() != this.curRange) {
					cell.div.classList.add(prev ? "prev" : "next");
				} else {
					prev = false;
				}
				cell.div.innerHTML = Std.string(useDate.getDate());
				cell.time = useDate.getTime();
				useTime += 86400000;
			}
			break;
		case 1:
			this.curRange = this.displayDate.getFullYear();
			this.modeButton.innerHTML = "" + Std.string(this.curRange);
			this.view.classList.add("month-mode");
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var div = this.cells[i].div;
				if(i < DatePicker.monthsAbbr.length) {
					div.classList.remove("prev","next");
					div.innerHTML = DatePicker.monthsAbbr[i];
					this.cells[i].time = new Date(this.displayDate.getFullYear(),i,this.displayDate.getDate(),this.displayDate.getHours(),this.displayDate.getMinutes(),this.displayDate.getSeconds()).getTime();
				} else {
					div.style.display = "none";
				}
			}
			break;
		case 2:
			this.curRange = Math.floor(this.displayDate.getFullYear() / 10) * 10;
			this.modeButton.innerHTML = "" + Std.string(this.curRange) + " - " + Std.string(this.curRange + 9);
			this.view.classList.add("year-mode");
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var div = this.cells[i].div;
				if(i < 12) {
					var useYear = this.curRange - 1 + i;
					div.classList.remove("prev","next");
					if(i == 0) {
						div.classList.add("prev");
					}
					if(i == 11) {
						div.classList.add("next");
					}
					div.innerHTML = useYear == null ? "null" : "" + useYear;
					this.cells[i].time = new Date(useYear,this.displayDate.getMonth(),this.displayDate.getDate(),this.displayDate.getHours(),this.displayDate.getMinutes(),this.displayDate.getSeconds()).getTime();
				} else {
					div.style.display = "none";
				}
			}
			break;
		case 3:
			this.curRange = Math.floor(this.displayDate.getFullYear() / 100) * 100;
			var yearOffset = (this.displayDate.getFullYear() - this.curRange) % 10;
			this.modeButton.innerHTML = "" + Std.string(this.curRange) + " - " + Std.string(this.curRange + 90);
			this.view.classList.add("decade-mode");
			var _g = 0;
			var _g1 = this.cells.length;
			while(_g < _g1) {
				var i = _g++;
				var div = this.cells[i].div;
				if(i < 12) {
					var useYear = this.curRange - 10 + i * 10;
					div.classList.remove("prev","next");
					if(i == 0) {
						div.classList.add("prev");
					}
					if(i == 11) {
						div.classList.add("next");
					}
					div.innerHTML = useYear == null ? "null" : "" + useYear;
					this.cells[i].time = new Date(useYear + yearOffset,this.displayDate.getMonth(),this.displayDate.getDate(),this.displayDate.getHours(),this.displayDate.getMinutes(),this.displayDate.getSeconds()).getTime();
				} else {
					div.style.display = "none";
				}
			}
			break;
		}
	}
	,__class__: DatePicker
};
var Example = function() { };
Example.__name__ = true;
Example.main = function() {
	var datePicker = new DatePicker(DOM.div({ p : window.document.body}));
	datePicker.oninput = function(val) {
		console.log("examples/Example.hx:12:",val);
		datePicker.hide();
	};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	__class__: haxe_ValueException
});
var haxe_ds_Either = $hxEnums["haxe.ds.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"haxe.ds.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
DOM.isIE11 = !!window.MSInputMethodContext && !!document.documentMode;
DatePicker.daysOfWeekAbbr = ["Su","Mo","Tu","We","Th","Fr","Sa"];
DatePicker.monthsFull = ["January","February","March","April","May","June","July","August","September","October","November","December"];
DatePicker.monthsAbbr = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DatePicker.millisecPerDay = 86400000;
Example.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
